<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>

	<groupId>com.elevysi.site.social</groupId>
	<artifactId>SocialBoot</artifactId>
	<version>0.0.1-SNAPSHOT</version>
	<packaging>jar</packaging>

	<name>Social</name>
	<description>Elevysi Social</description>

	<parent>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-parent</artifactId>
		<version>1.5.9.RELEASE</version>
		<relativePath/> <!-- lookup parent from repository -->
	</parent>

	<properties>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		<project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
		<java.version>1.8</java.version>
		<!--Docker build Config-->
		<docker.image.name>elevysi/social</docker.image.name>
    	<docker.image.tag>1.0.1</docker.image.tag>
	</properties>

	<dependencies>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-data-jpa</artifactId>
		</dependency>
		
		
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-orm</artifactId>
		</dependency>

		<dependency>
			<groupId>org.hibernate</groupId>
			<artifactId>hibernate-entitymanager</artifactId>
		</dependency>
		
		<dependency>
			<groupId>org.hibernate</groupId>
			<artifactId>hibernate-validator</artifactId>
		</dependency>
		
		<dependency>
		    <groupId>mysql</groupId>
		    <artifactId>mysql-connector-java</artifactId>
		</dependency>
		
		
		<!-- <dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-security</artifactId>
		</dependency> -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web</artifactId>
		</dependency>

		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-tomcat</artifactId>
			<scope>provided</scope>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.springframework.security</groupId>
			<artifactId>spring-security-test</artifactId>
			<scope>test</scope>
		</dependency>
		
		
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-thymeleaf</artifactId>
		</dependency>
		
		<!-- Spring Cloud Client -->
		<dependency>
			<groupId>org.springframework.cloud</groupId>
			<artifactId>spring-cloud-config-client</artifactId>
			<version>1.4.1.RELEASE</version>
		</dependency>

		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-actuator</artifactId>
		</dependency>
		
		<dependency>
			<groupId>org.springframework.cloud</groupId>
			<artifactId>spring-cloud-starter-eureka</artifactId>
			<version>1.4.2.RELEASE</version>
		</dependency>
		
		<dependency>
			<groupId>org.springframework.cloud</groupId>
			<artifactId>spring-cloud-starter-feign</artifactId>
			<version>1.4.2.RELEASE</version>
		</dependency>

	</dependencies>

	<build>
		<plugins>
			
			<!-- We use the Resources plugin to filer Dockerfile and run.sh, it inserts actual JAR filename -->
      		 <!-- The final Dockerfile will be created in target/dockerfile/Dockerfile -->
			<plugin>
		        <artifactId>maven-resources-plugin</artifactId>
		        <executions>
		          <execution>
		            <id>copy-resources</id>
		            <!-- here the phase you need -->
		            <phase>validate</phase>
		            <goals>
		              <goal>copy-resources</goal>
		            </goals>
		            <configuration>
		              <outputDirectory>${basedir}/target/dockerfile</outputDirectory>
		              <resources>
		                <resource>
		                  <directory>src/main/docker</directory>
		                  <filtering>true</filtering>
		                </resource>
		              </resources>
		            </configuration>
		          </execution>
		        </executions>
		      </plugin>
		      <plugin>
		        <groupId>com.spotify</groupId>
		        <artifactId>docker-maven-plugin</artifactId>
		        <version>0.4.10</version>
		        <configuration>
		          <imageName>${docker.image.name}:${docker.image.tag}</imageName>
		          <dockerDirectory>${basedir}/target/dockerfile</dockerDirectory>
		          <resources>
		            <resource>
		              <targetPath>/</targetPath>
		              <directory>${project.build.directory}</directory>
		              <include>${project.build.finalName}.jar</include>
		            </resource>
		          </resources>
		        </configuration>
		      </plugin>
		
			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
			</plugin>
			
			<plugin>
				<groupId>org.bsc.maven</groupId>
				<artifactId>maven-processor-plugin</artifactId>
				<version>3.3.2</version>
				
				<executions>
            		<execution>
			            <id>process</id>
			            <phase>generate-sources</phase>
			            <goals>
			              <goal>process</goal>
			            </goals>
			           
			            <configuration>
			            	<outputDirectory>${project.build.directory}/generated-sources/jpametamodel</outputDirectory>
			            	<processors>
			            		<processor>org.hibernate.jpamodelgen.JPAMetaModelEntityProcessor</processor>
			            	</processors>
			            </configuration>
			          </execution>
            	
            	</executions>
            	
            	<dependencies>
			       <dependency>
			       	<groupId>org.hibernate</groupId>
			       	<artifactId>hibernate-jpamodelgen</artifactId>
			       	<version>5.2.12.Final</version>
			       </dependency>
            	</dependencies>
				
			</plugin>

			<plugin>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>build-helper-maven-plugin</artifactId>
				<executions>
			        <execution>
			            <id>add-source</id>
			            <phase>generate-sources</phase>
			            <goals>
			                <goal>add-source</goal>
			            </goals>
			            <configuration>
			                <sources>
			                    <source>${project.build.directory}/generated-sources/jpametamodel</source>
			                </sources>
			            </configuration>
			        </execution>
			    </executions>
			</plugin>

		</plugins>
	</build>
	


</project>
